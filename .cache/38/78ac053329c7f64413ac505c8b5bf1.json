{"id":"jGDL","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"./use-combine-values.mjs","loc":{"line":1,"column":39,"index":39},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-template.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-combine-values.mjs"},{"name":"./utils/is-motion-value.mjs","loc":{"line":2,"column":30,"index":97},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-template.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\utils\\is-motion-value.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMotionTemplate = useMotionTemplate;\nvar _useCombineValues = require(\"./use-combine-values.mjs\");\nvar _isMotionValue = require(\"./utils/is-motion-value.mjs\");\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */\nfunction useMotionTemplate(fragments, ...values) {\n  /**\n   * Create a function that will build a string from the latest motion values.\n   */\n  const numFragments = fragments.length;\n  function buildValue() {\n    let output = ``;\n    for (let i = 0; i < numFragments; i++) {\n      output += fragments[i];\n      const value = values[i];\n      if (value) {\n        output += (0, _isMotionValue.isMotionValue)(value) ? value.get() : value;\n      }\n    }\n    return output;\n  }\n  return (0, _useCombineValues.useCombineMotionValues)(values.filter(_isMotionValue.isMotionValue), buildValue);\n}"},"sourceMaps":null,"error":null,"hash":"53132218b70bfd9cbed592c7150fb63e","cacheData":{"env":{}}}