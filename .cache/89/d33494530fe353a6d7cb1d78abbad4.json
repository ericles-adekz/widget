{"id":"vaNw","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"../../../render/dom/utils/is-css-variable.mjs","loc":{"line":1,"column":33,"index":33},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\complex\\index.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\dom\\utils\\is-css-variable.mjs"},{"name":"../../../utils/noop.mjs","loc":{"line":2,"column":21,"index":103},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\complex\\index.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\noop.mjs"},{"name":"../color/index.mjs","loc":{"line":3,"column":22,"index":152},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\complex\\index.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\color\\index.mjs"},{"name":"../numbers/index.mjs","loc":{"line":4,"column":23,"index":197},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\complex\\index.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\numbers\\index.mjs"},{"name":"../utils.mjs","loc":{"line":5,"column":59,"index":280},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\complex\\index.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\types\\utils.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analyseComplexValue = analyseComplexValue;\nexports.complex = void 0;\nvar _isCssVariable = require(\"../../../render/dom/utils/is-css-variable.mjs\");\nvar _noop = require(\"../../../utils/noop.mjs\");\nvar _index = require(\"../color/index.mjs\");\nvar _index2 = require(\"../numbers/index.mjs\");\nvar _utils = require(\"../utils.mjs\");\nfunction test(v) {\n  var _a, _b;\n  return isNaN(v) && (0, _utils.isString)(v) && (((_a = v.match(_utils.floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(_utils.colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\nconst cssVarTokeniser = {\n  regex: _isCssVariable.cssVariableRegex,\n  countKey: \"Vars\",\n  token: \"${v}\",\n  parse: _noop.noop\n};\nconst colorTokeniser = {\n  regex: _utils.colorRegex,\n  countKey: \"Colors\",\n  token: \"${c}\",\n  parse: _index.color.parse\n};\nconst numberTokeniser = {\n  regex: _utils.floatRegex,\n  countKey: \"Numbers\",\n  token: \"${n}\",\n  parse: _index2.number.parse\n};\nfunction tokenise(info, {\n  regex,\n  countKey,\n  token,\n  parse\n}) {\n  const matches = info.tokenised.match(regex);\n  if (!matches) return;\n  info[\"num\" + countKey] = matches.length;\n  info.tokenised = info.tokenised.replace(regex, token);\n  info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n  const originalValue = value.toString();\n  const info = {\n    value: originalValue,\n    tokenised: originalValue,\n    values: [],\n    numVars: 0,\n    numColors: 0,\n    numNumbers: 0\n  };\n  if (info.value.includes(\"var(--\")) tokenise(info, cssVarTokeniser);\n  tokenise(info, colorTokeniser);\n  tokenise(info, numberTokeniser);\n  return info;\n}\nfunction parseComplexValue(v) {\n  return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n  const {\n    values,\n    numColors,\n    numVars,\n    tokenised\n  } = analyseComplexValue(source);\n  const numValues = values.length;\n  return v => {\n    let output = tokenised;\n    for (let i = 0; i < numValues; i++) {\n      if (i < numVars) {\n        output = output.replace(cssVarTokeniser.token, v[i]);\n      } else if (i < numVars + numColors) {\n        output = output.replace(colorTokeniser.token, _index.color.transform(v[i]));\n      } else {\n        output = output.replace(numberTokeniser.token, (0, _utils.sanitize)(v[i]));\n      }\n    }\n    return output;\n  };\n}\nconst convertNumbersToZero = v => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n  const parsed = parseComplexValue(v);\n  const transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n  test,\n  parse: parseComplexValue,\n  createTransformer,\n  getAnimatableNone\n};\nexports.complex = complex;"},"sourceMaps":null,"error":null,"hash":"302735eb7fe986de20a51324ca973954","cacheData":{"env":{}}}