{"id":"FQQL","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"react","loc":{"line":1,"column":55,"index":55},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\react\\index.js"},{"name":"./utils/is-motion-value.mjs","loc":{"line":2,"column":30,"index":94},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\utils\\is-motion-value.mjs"},{"name":"./use-motion-value.mjs","loc":{"line":3,"column":31,"index":156},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-value.mjs"},{"name":"../context/MotionConfigContext.mjs","loc":{"line":4,"column":36,"index":218},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\context\\MotionConfigContext.mjs"},{"name":"../utils/use-isomorphic-effect.mjs","loc":{"line":5,"column":42,"index":298},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\use-isomorphic-effect.mjs"},{"name":"../animation/animators/js/index.mjs","loc":{"line":6,"column":29,"index":365},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\animation\\animators\\js\\index.mjs"},{"name":"../frameloop/data.mjs","loc":{"line":7,"column":26,"index":430},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\frameloop\\data.mjs"},{"name":"../utils/time-conversion.mjs","loc":{"line":8,"column":38,"index":493},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-spring.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\time-conversion.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSpring = useSpring;\nvar _react = require(\"react\");\nvar _isMotionValue = require(\"./utils/is-motion-value.mjs\");\nvar _useMotionValue = require(\"./use-motion-value.mjs\");\nvar _MotionConfigContext = require(\"../context/MotionConfigContext.mjs\");\nvar _useIsomorphicEffect = require(\"../utils/use-isomorphic-effect.mjs\");\nvar _index = require(\"../animation/animators/js/index.mjs\");\nvar _data = require(\"../frameloop/data.mjs\");\nvar _timeConversion = require(\"../utils/time-conversion.mjs\");\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n  const {\n    isStatic\n  } = (0, _react.useContext)(_MotionConfigContext.MotionConfigContext);\n  const activeSpringAnimation = (0, _react.useRef)(null);\n  const value = (0, _useMotionValue.useMotionValue)((0, _isMotionValue.isMotionValue)(source) ? source.get() : source);\n  const stopAnimation = () => {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n  (0, _react.useInsertionEffect)(() => {\n    return value.attach((v, set) => {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      stopAnimation();\n      activeSpringAnimation.current = (0, _index.animateValue)({\n        keyframes: [value.get(), v],\n        velocity: value.getVelocity(),\n        type: \"spring\",\n        restDelta: 0.001,\n        restSpeed: 0.01,\n        ...config,\n        onUpdate: set\n      });\n      /**\n       * If we're between frames, resync the animation to the frameloop.\n       */\n      if (!_data.frameData.isProcessing) {\n        const delta = performance.now() - _data.frameData.timestamp;\n        if (delta < 30) {\n          activeSpringAnimation.current.time = (0, _timeConversion.millisecondsToSeconds)(delta);\n        }\n      }\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  (0, _useIsomorphicEffect.useIsomorphicLayoutEffect)(() => {\n    if ((0, _isMotionValue.isMotionValue)(source)) {\n      return source.on(\"change\", v => value.set(parseFloat(v)));\n    }\n  }, [value]);\n  return value;\n}"},"sourceMaps":null,"error":null,"hash":"c8fb7e6a5d6ba6f9f1279a88d7631826","cacheData":{"env":{}}}