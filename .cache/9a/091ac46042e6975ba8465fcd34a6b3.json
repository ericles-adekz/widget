{"id":"Rt1I","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"../../../motion/utils/valid-prop.mjs","loc":{"line":1,"column":34,"index":34},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\dom\\utils\\filter-props.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\motion\\utils\\valid-prop.mjs"},{"name":"@emotion/is-prop-valid","optional":true,"loc":{"line":29,"column":36,"index":1440},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\dom\\utils\\filter-props.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\@emotion\\is-prop-valid\\dist\\is-prop-valid.browser.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterProps = filterProps;\nexports.loadExternalIsValidProp = loadExternalIsValidProp;\nvar _validProp = require(\"../../../motion/utils/valid-prop.mjs\");\nlet shouldForward = key => !(0, _validProp.isValidMotionProp)(key);\nfunction loadExternalIsValidProp(isValidProp) {\n  if (!isValidProp) return;\n  // Explicitly filter our events\n  shouldForward = key => key.startsWith(\"on\") ? !(0, _validProp.isValidMotionProp)(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n  /**\n   * We attempt to import this package but require won't be defined in esm environments, in that case\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n   * in favour of explicit injection.\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {\n  // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n  const filteredProps = {};\n  for (const key in props) {\n    /**\n     * values is considered a valid prop by Emotion, so if it's present\n     * this will be rendered out to the DOM unless explicitly filtered.\n     *\n     * We check the type as it could be used with the `feColorMatrix`\n     * element, which we support.\n     */\n    if (key === \"values\" && typeof props.values === \"object\") continue;\n    if (shouldForward(key) || forwardMotionProps === true && (0, _validProp.isValidMotionProp)(key) || !isDom && !(0, _validProp.isValidMotionProp)(key) ||\n    // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}"},"sourceMaps":null,"error":null,"hash":"2908893335f2e32ecc82ae8efb04bfdf","cacheData":{"env":{}}}