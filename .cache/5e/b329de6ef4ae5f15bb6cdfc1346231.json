{"id":"jiZz","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"../events/add-dom-event.mjs","loc":{"line":1,"column":28,"index":28},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\focus.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\events\\add-dom-event.mjs"},{"name":"../motion/features/Feature.mjs","loc":{"line":2,"column":24,"index":83},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\focus.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\motion\\features\\Feature.mjs"},{"name":"../utils/pipe.mjs","loc":{"line":3,"column":21,"index":138},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\focus.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\pipe.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FocusGesture = void 0;\nvar _addDomEvent = require(\"../events/add-dom-event.mjs\");\nvar _Feature = require(\"../motion/features/Feature.mjs\");\nvar _pipe = require(\"../utils/pipe.mjs\");\nclass FocusGesture extends _Feature.Feature {\n  constructor() {\n    super(...arguments);\n    this.isActive = false;\n  }\n  onFocus() {\n    let isFocusVisible = false;\n    /**\n     * If this element doesn't match focus-visible then don't\n     * apply whileHover. But, if matches throws that focus-visible\n     * is not a valid selector then in that browser outline styles will be applied\n     * to the element by default and we want to match that behaviour with whileFocus.\n     */\n    try {\n      isFocusVisible = this.node.current.matches(\":focus-visible\");\n    } catch (e) {\n      isFocusVisible = true;\n    }\n    if (!isFocusVisible || !this.node.animationState) return;\n    this.node.animationState.setActive(\"whileFocus\", true);\n    this.isActive = true;\n  }\n  onBlur() {\n    if (!this.isActive || !this.node.animationState) return;\n    this.node.animationState.setActive(\"whileFocus\", false);\n    this.isActive = false;\n  }\n  mount() {\n    this.unmount = (0, _pipe.pipe)((0, _addDomEvent.addDomEvent)(this.node.current, \"focus\", () => this.onFocus()), (0, _addDomEvent.addDomEvent)(this.node.current, \"blur\", () => this.onBlur()));\n  }\n  unmount() {}\n}\nexports.FocusGesture = FocusGesture;"},"sourceMaps":null,"error":null,"hash":"72fb294b856ebec668c50903296874e5","cacheData":{"env":{}}}