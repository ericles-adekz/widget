{"id":"cNAf","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"./use-transform.mjs","loc":{"line":1,"column":29,"index":29},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-inverted-scale.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-transform.mjs"},{"name":"../utils/errors.mjs","loc":{"line":2,"column":35,"index":87},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-inverted-scale.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\errors.mjs"},{"name":"./use-motion-value.mjs","loc":{"line":3,"column":31,"index":141},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-inverted-scale.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-value.mjs"},{"name":"../context/MotionContext/index.mjs","loc":{"line":4,"column":30,"index":197},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-inverted-scale.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\context\\MotionContext\\index.mjs"},{"name":"react","loc":{"line":5,"column":27,"index":262},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-inverted-scale.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\react\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invertScale = void 0;\nexports.useInvertedScale = useInvertedScale;\nvar _useTransform = require(\"./use-transform.mjs\");\nvar _errors = require(\"../utils/errors.mjs\");\nvar _useMotionValue = require(\"./use-motion-value.mjs\");\nvar _index = require(\"../context/MotionContext/index.mjs\");\nvar _react = require(\"react\");\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = scale => scale > 0.001 ? 1 / scale : maxScale;\nexports.invertScale = invertScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n  let parentScaleX = (0, _useMotionValue.useMotionValue)(1);\n  let parentScaleY = (0, _useMotionValue.useMotionValue)(1);\n  const {\n    visualElement\n  } = (0, _react.useContext)(_index.MotionContext);\n  (0, _errors.invariant)(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n  (0, _errors.warning)(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n  hasWarned = true;\n  if (scale) {\n    parentScaleX = scale.scaleX || parentScaleX;\n    parentScaleY = scale.scaleY || parentScaleY;\n  } else if (visualElement) {\n    parentScaleX = visualElement.getValue(\"scaleX\", 1);\n    parentScaleY = visualElement.getValue(\"scaleY\", 1);\n  }\n  const scaleX = (0, _useTransform.useTransform)(parentScaleX, invertScale);\n  const scaleY = (0, _useTransform.useTransform)(parentScaleY, invertScale);\n  return {\n    scaleX,\n    scaleY\n  };\n}"},"sourceMaps":null,"error":null,"hash":"76296e953a6e594e1a51180dd15e5fba","cacheData":{"env":{}}}