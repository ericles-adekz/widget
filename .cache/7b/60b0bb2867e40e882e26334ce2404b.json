{"id":"ZKWc","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"../../../value/utils/is-motion-value.mjs","loc":{"line":1,"column":30,"index":30},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\svg\\utils\\scrape-motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\utils\\is-motion-value.mjs"},{"name":"../../html/utils/scrape-motion-values.mjs","loc":{"line":2,"column":77,"index":151},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\svg\\utils\\scrape-motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\html\\utils\\scrape-motion-values.mjs"},{"name":"../../html/utils/transform.mjs","loc":{"line":3,"column":35,"index":231},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\svg\\utils\\scrape-motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\html\\utils\\transform.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scrapeMotionValuesFromProps = scrapeMotionValuesFromProps;\nvar _isMotionValue = require(\"../../../value/utils/is-motion-value.mjs\");\nvar _scrapeMotionValues = require(\"../../html/utils/scrape-motion-values.mjs\");\nvar _transform = require(\"../../html/utils/transform.mjs\");\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n  const newValues = (0, _scrapeMotionValues.scrapeMotionValuesFromProps)(props, prevProps);\n  for (const key in props) {\n    if ((0, _isMotionValue.isMotionValue)(props[key]) || (0, _isMotionValue.isMotionValue)(prevProps[key])) {\n      const targetKey = _transform.transformPropOrder.indexOf(key) !== -1 ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1) : key;\n      newValues[targetKey] = props[key];\n    }\n  }\n  return newValues;\n}"},"sourceMaps":null,"error":null,"hash":"13d40e63bc00d12eab4721f7a2d2520d","cacheData":{"env":{}}}