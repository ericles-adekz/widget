{"id":"rBwd","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"react","loc":{"line":1,"column":46,"index":46},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\use-cycle.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\react\\index.js"},{"name":"./wrap.mjs","loc":{"line":2,"column":21,"index":76},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\use-cycle.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\wrap.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCycle = useCycle;\nvar _react = require(\"react\");\nvar _wrap = require(\"./wrap.mjs\");\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle(...items) {\n  const index = (0, _react.useRef)(0);\n  const [item, setItem] = (0, _react.useState)(items[index.current]);\n  const runCycle = (0, _react.useCallback)(next => {\n    index.current = typeof next !== \"number\" ? (0, _wrap.wrap)(0, items.length, index.current + 1) : next;\n    setItem(items[index.current]);\n  },\n  // The array will change on each call, but by putting items.length at\n  // the front of this array, we guarantee the dependency comparison will match up\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [items.length, ...items]);\n  return [item, runCycle];\n}"},"sourceMaps":null,"error":null,"hash":"0fdaba63489ecfea3c9715af2cdae1fe","cacheData":{"env":{}}}