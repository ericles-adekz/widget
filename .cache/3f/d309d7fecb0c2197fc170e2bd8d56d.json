{"id":"V7ld","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"../../value/use-will-change/is.mjs","loc":{"line":1,"column":40,"index":40},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\utils\\motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-will-change\\is.mjs"},{"name":"../../utils/warn-once.mjs","loc":{"line":2,"column":25,"index":103},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\utils\\motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\warn-once.mjs"},{"name":"../../value/index.mjs","loc":{"line":3,"column":28,"index":160},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\utils\\motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\index.mjs"},{"name":"../../value/utils/is-motion-value.mjs","loc":{"line":4,"column":30,"index":215},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\render\\utils\\motion-values.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\utils\\is-motion-value.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateMotionValuesFromProps = updateMotionValuesFromProps;\nvar _is = require(\"../../value/use-will-change/is.mjs\");\nvar _warnOnce = require(\"../../utils/warn-once.mjs\");\nvar _index = require(\"../../value/index.mjs\");\nvar _isMotionValue = require(\"../../value/utils/is-motion-value.mjs\");\nfunction updateMotionValuesFromProps(element, next, prev) {\n  const {\n    willChange\n  } = next;\n  for (const key in next) {\n    const nextValue = next[key];\n    const prevValue = prev[key];\n    if ((0, _isMotionValue.isMotionValue)(nextValue)) {\n      /**\n       * If this is a motion value found in props or style, we want to add it\n       * to our visual element's motion value map.\n       */\n      element.addValue(key, nextValue);\n      if ((0, _is.isWillChangeMotionValue)(willChange)) {\n        willChange.add(key);\n      }\n      /**\n       * Check the version of the incoming motion value with this version\n       * and warn against mismatches.\n       */\n      if (\"production\" === \"development\") {\n        (0, _warnOnce.warnOnce)(nextValue.version === \"10.12.18\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.12.18 may not work as expected.`);\n      }\n    } else if ((0, _isMotionValue.isMotionValue)(prevValue)) {\n      /**\n       * If we're swapping from a motion value to a static value,\n       * create a new motion value from that\n       */\n      element.addValue(key, (0, _index.motionValue)(nextValue, {\n        owner: element\n      }));\n      if ((0, _is.isWillChangeMotionValue)(willChange)) {\n        willChange.remove(key);\n      }\n    } else if (prevValue !== nextValue) {\n      /**\n       * If this is a flat value that has changed, update the motion value\n       * or create one if it doesn't exist. We only want to do this if we're\n       * not handling the value with our animation state.\n       */\n      if (element.hasValue(key)) {\n        const existingValue = element.getValue(key);\n        // TODO: Only update values that aren't being animated or even looked at\n        !existingValue.hasAnimated && existingValue.set(nextValue);\n      } else {\n        const latestValue = element.getStaticValue(key);\n        element.addValue(key, (0, _index.motionValue)(latestValue !== undefined ? latestValue : nextValue, {\n          owner: element\n        }));\n      }\n    }\n  }\n  // Handle removed values\n  for (const key in prev) {\n    if (next[key] === undefined) element.removeValue(key);\n  }\n  return next;\n}"},"sourceMaps":null,"error":null,"hash":"2d514f0ca751b7791eb98af2c12751bf","cacheData":{"env":{"NODE_ENV":"production"}}}