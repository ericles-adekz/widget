{"id":"p0rp","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"react","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\reduced-motion\\use-reduced-motion.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\react\\index.js"},{"name":"./index.mjs","loc":{"line":2,"column":41,"index":75},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\reduced-motion\\use-reduced-motion.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\reduced-motion\\index.mjs"},{"name":"../warn-once.mjs","loc":{"line":3,"column":25,"index":115},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\reduced-motion\\use-reduced-motion.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\warn-once.mjs"},{"name":"./state.mjs","loc":{"line":4,"column":63,"index":198},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\reduced-motion\\use-reduced-motion.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\reduced-motion\\state.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useReducedMotion = useReducedMotion;\nvar _react = require(\"react\");\nvar _index = require(\"./index.mjs\");\nvar _warnOnce = require(\"../warn-once.mjs\");\nvar _state = require(\"./state.mjs\");\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !_state.hasReducedMotionListener.current && (0, _index.initPrefersReducedMotion)();\n  const [shouldReduceMotion] = (0, _react.useState)(_state.prefersReducedMotion.current);\n  if (\"production\" !== \"production\") {\n    (0, _warnOnce.warnOnce)(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n  }\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n  return shouldReduceMotion;\n}"},"sourceMaps":null,"error":null,"hash":"c367a757e47387b793a0bb78ea6a1e2e","cacheData":{"env":{"NODE_ENV":"production"}}}