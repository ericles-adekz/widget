{"id":"g4mR","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"react","loc":{"line":1,"column":48,"index":48},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-value.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\react\\index.js"},{"name":"./index.mjs","loc":{"line":2,"column":28,"index":85},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-value.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\index.mjs"},{"name":"../context/MotionConfigContext.mjs","loc":{"line":3,"column":36,"index":136},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-value.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\context\\MotionConfigContext.mjs"},{"name":"../utils/use-constant.mjs","loc":{"line":4,"column":28,"index":202},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\value\\use-motion-value.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\use-constant.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMotionValue = useMotionValue;\nvar _react = require(\"react\");\nvar _index = require(\"./index.mjs\");\nvar _MotionConfigContext = require(\"../context/MotionConfigContext.mjs\");\nvar _useConstant = require(\"../utils/use-constant.mjs\");\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n  const value = (0, _useConstant.useConstant)(() => (0, _index.motionValue)(initial));\n  /**\n   * If this motion value is being used in static mode, like on\n   * the Framer canvas, force components to rerender when the motion\n   * value is updated.\n   */\n  const {\n    isStatic\n  } = (0, _react.useContext)(_MotionConfigContext.MotionConfigContext);\n  if (isStatic) {\n    const [, setLatest] = (0, _react.useState)(initial);\n    (0, _react.useEffect)(() => value.on(\"change\", setLatest), []);\n  }\n  return value;\n}"},"sourceMaps":null,"error":null,"hash":"d3c0fa63f187740f54016dbcc287ec71","cacheData":{"env":{}}}