{"id":"JHdi","dependencies":[{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\package.json","includedInParent":true,"mtime":1688673350195},{"name":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\package.json","includedInParent":true,"mtime":1688672641386},{"name":"../events/event-info.mjs","loc":{"line":1,"column":33,"index":33},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\events\\event-info.mjs"},{"name":"../events/add-dom-event.mjs","loc":{"line":2,"column":28,"index":89},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\events\\add-dom-event.mjs"},{"name":"../events/add-pointer-event.mjs","loc":{"line":3,"column":32,"index":152},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\events\\add-pointer-event.mjs"},{"name":"../motion/features/Feature.mjs","loc":{"line":4,"column":24,"index":211},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\motion\\features\\Feature.mjs"},{"name":"../utils/pipe.mjs","loc":{"line":5,"column":21,"index":266},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\pipe.mjs"},{"name":"./drag/utils/lock.mjs","loc":{"line":6,"column":29,"index":316},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\drag\\utils\\lock.mjs"},{"name":"./utils/is-node-or-child.mjs","loc":{"line":7,"column":30,"index":371},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\utils\\is-node-or-child.mjs"},{"name":"../utils/noop.mjs","loc":{"line":8,"column":21,"index":424},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\utils\\noop.mjs"},{"name":"../frameloop/index.mjs","loc":{"line":9,"column":22,"index":467},"parent":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\gestures\\press.mjs","resolved":"C:\\Projetos\\adekz\\corporatefront_widget\\node_modules\\framer-motion\\dist\\es\\frameloop\\index.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PressGesture = void 0;\nvar _eventInfo = require(\"../events/event-info.mjs\");\nvar _addDomEvent = require(\"../events/add-dom-event.mjs\");\nvar _addPointerEvent = require(\"../events/add-pointer-event.mjs\");\nvar _Feature = require(\"../motion/features/Feature.mjs\");\nvar _pipe = require(\"../utils/pipe.mjs\");\nvar _lock = require(\"./drag/utils/lock.mjs\");\nvar _isNodeOrChild = require(\"./utils/is-node-or-child.mjs\");\nvar _noop = require(\"../utils/noop.mjs\");\nvar _index = require(\"../frameloop/index.mjs\");\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, (0, _eventInfo.extractEventInfo)(syntheticPointerEvent));\n}\nclass PressGesture extends _Feature.Feature {\n  constructor() {\n    super(...arguments);\n    this.removeStartListeners = _noop.noop;\n    this.removeEndListeners = _noop.noop;\n    this.removeAccessibleListeners = _noop.noop;\n    this.startPointerPress = (startEvent, startInfo) => {\n      this.removeEndListeners();\n      if (this.isPressing) return;\n      const props = this.node.getProps();\n      const endPointerPress = (endEvent, endInfo) => {\n        if (!this.checkPressEnd()) return;\n        const {\n          onTap,\n          onTapCancel\n        } = this.node.getProps();\n        _index.frame.update(() => {\n          /**\n           * We only count this as a tap gesture if the event.target is the same\n           * as, or a child of, this component's element\n           */\n          !(0, _isNodeOrChild.isNodeOrChild)(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n        });\n      };\n      const removePointerUpListener = (0, _addPointerEvent.addPointerEvent)(window, \"pointerup\", endPointerPress, {\n        passive: !(props.onTap || props[\"onPointerUp\"])\n      });\n      const removePointerCancelListener = (0, _addPointerEvent.addPointerEvent)(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n        passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n      });\n      this.removeEndListeners = (0, _pipe.pipe)(removePointerUpListener, removePointerCancelListener);\n      this.startPress(startEvent, startInfo);\n    };\n    this.startAccessiblePress = () => {\n      const handleKeydown = keydownEvent => {\n        if (keydownEvent.key !== \"Enter\" || this.isPressing) return;\n        const handleKeyup = keyupEvent => {\n          if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd()) return;\n          fireSyntheticPointerEvent(\"up\", (event, info) => {\n            const {\n              onTap\n            } = this.node.getProps();\n            if (onTap) {\n              _index.frame.update(() => onTap(event, info));\n            }\n          });\n        };\n        this.removeEndListeners();\n        this.removeEndListeners = (0, _addDomEvent.addDomEvent)(this.node.current, \"keyup\", handleKeyup);\n        fireSyntheticPointerEvent(\"down\", (event, info) => {\n          this.startPress(event, info);\n        });\n      };\n      const removeKeydownListener = (0, _addDomEvent.addDomEvent)(this.node.current, \"keydown\", handleKeydown);\n      const handleBlur = () => {\n        if (!this.isPressing) return;\n        fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n      };\n      const removeBlurListener = (0, _addDomEvent.addDomEvent)(this.node.current, \"blur\", handleBlur);\n      this.removeAccessibleListeners = (0, _pipe.pipe)(removeKeydownListener, removeBlurListener);\n    };\n  }\n  startPress(event, info) {\n    this.isPressing = true;\n    const {\n      onTapStart,\n      whileTap\n    } = this.node.getProps();\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n    if (whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", true);\n    }\n    if (onTapStart) {\n      _index.frame.update(() => onTapStart(event, info));\n    }\n  }\n  checkPressEnd() {\n    this.removeEndListeners();\n    this.isPressing = false;\n    const props = this.node.getProps();\n    if (props.whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", false);\n    }\n    return !(0, _lock.isDragActive)();\n  }\n  cancelPress(event, info) {\n    if (!this.checkPressEnd()) return;\n    const {\n      onTapCancel\n    } = this.node.getProps();\n    if (onTapCancel) {\n      _index.frame.update(() => onTapCancel(event, info));\n    }\n  }\n  mount() {\n    const props = this.node.getProps();\n    const removePointerListener = (0, _addPointerEvent.addPointerEvent)(this.node.current, \"pointerdown\", this.startPointerPress, {\n      passive: !(props.onTapStart || props[\"onPointerStart\"])\n    });\n    const removeFocusListener = (0, _addDomEvent.addDomEvent)(this.node.current, \"focus\", this.startAccessiblePress);\n    this.removeStartListeners = (0, _pipe.pipe)(removePointerListener, removeFocusListener);\n  }\n  unmount() {\n    this.removeStartListeners();\n    this.removeEndListeners();\n    this.removeAccessibleListeners();\n  }\n}\nexports.PressGesture = PressGesture;"},"sourceMaps":null,"error":null,"hash":"cd1244731881118e21653449eefdd3af","cacheData":{"env":{}}}